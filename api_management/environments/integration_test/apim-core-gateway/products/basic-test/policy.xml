<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
        <trace source="Basic product is called" severity="information">
            <message>Subscription @(context.Subscription.Name) called free product</message>
        </trace>
        <set-variable name="backend-pool" value="euw-int-ai-dev-genai-01-aoai" />
        <set-variable name="standby-pool" value="euw-int-ai-dev-genai-02-aoai" />
        
                <azure-openai-token-limit counter-key="@(context.Subscription.Id)" tokens-per-minute="10000" estimate-prompt-tokens="false" remaining-tokens-header-name="x-oai-tpm-remaining-tokens" tokens-consumed-header-name="x-oai-tpm-tokens-consumed" />
                <quota-by-key calls="1000" renewal-period="300" counter-key="@(context.Subscription.Id)" />
           
       
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
        <set-header name="original-error-source" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<string>("errorsource"))</value>
        </set-header>
        <choose>
            <when condition="@(context.LastError.Source == "quota-by-key" 
            || context.LastError.Source == "azure-openai-token-limit")">
                <set-variable name="replay-url" value="@("http://" + context.Request.Headers.GetValueOrDefault("X-Original-Host") + context.Request.Headers.GetValueOrDefault("X-Original-Url"))" />
                <set-variable name="original-error-reason" value="@(context.LastError.Source)" />
                <!-- In case of throttling from Policy, we replay the same request again to APIM without quota policies check now -->
                <send-request mode="copy" response-variable-name="replay-response" timeout="60" ignore-error="false">
                    <set-url>@(context.Variables.GetValueOrDefault<string>("replay-url"))</set-url>
                    <set-method>POST</set-method>
                    <set-header name="skip-rate-limit" exists-action="override">
                        <value>true</value>
                    </set-header>
                </send-request>
                <!-- THIS IS IMPORTANT STEP i.e. the response captured above in variable has to be explicity sent back -->
                <return-response response-variable-name="replay-response">
                    <set-header name="replay" exists-action="override">
                        <value>"true"</value>
                    </set-header>
                    <set-header name="x-request-replayed" exists-action="override">
                        <value>"true"</value>
                    </set-header>
                    <set-header name="x-original-error-reason" exists-action="override">
                        <value>@(context.Variables.GetValueOrDefault<string>("original-error-reason"))</value>
                    </set-header>
                </return-response>
            </when>
            <otherwise>
                <set-variable name="replay-url" value="@("http://" + context.Request.Headers.GetValueOrDefault("X-Original-Host") + context.Request.Headers.GetValueOrDefault("X-Original-Url"))" />
                <set-variable name="original-error-reason" value="@(context.LastError.Source)" />
                <set-header name="replay-url" exists-action="override">
                    <value>@(context.Variables.GetValueOrDefault<string>("replay-url"))</value>
                </set-header>
                <set-header name="original-error-reason" exists-action="override">
                    <value>@(context.Variables.GetValueOrDefault<string>("original-error-reason"))</value>
                </set-header>
                <set-header name="x-test-error-block" exists-action="override">
                    <value>otherwise</value>
                </set-header>
            </otherwise>
        </choose>
    </on-error>
</policies>
