<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
        <!-- START: Optional Handling for Azure OpenAI APIs when they are in same product -->
        <!-- Details : 
            If we have same APIM product which encompasses all 3 OpenAI APIs(chat,embedding,image) 
            then since the underlying Azure OpenAI instance model is essentially can serve any OpenAI APIs ,
            then irrespective of the endpoints(/chat, /embeddings etc.) used in creating the Azure Client from SDK
            the request will get served als because since we are following Wildcard approach in APIs operations (eg: POST */).
            This has also been called out in ADR here: https://sitecore.atlassian.net/wiki/spaces/ATD/pages/5060001855/Architecture+Decision+Records+ADR
            
            However, if we would be having separate Products for separate APIs(eg: embedding product, chat product,etc)
            then this issue won't come as the request will be blocked from APIM level itself, since other APIs would be 
            part of different products accessible via their own separate subscription keys. 
        -->
        <set-variable name="blockedApis" value="/chat, /images" />
        <include-fragment fragment-id="block-other-apis" />
        <!-- END:Optional Handling for Azure OpenAI APIs -->
        <include-fragment fragment-id="auth-via-managed-identity" />
        <!-- DISABLING AS NOT SUPPORTED BY CHATGP4o, REENABME WHEN RELEASED BY MS-->
        <!--<include-fragment fragment-id="usage-tracking-with-appinsights" /> -->
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <include-fragment fragment-id="retry-with-payg" />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
        <include-fragment fragment-id="add-common-headers" />
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
        <include-fragment fragment-id="common-error-headers" />
    </on-error>
</policies>
